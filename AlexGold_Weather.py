import telebot
from telebot import types
import os
import random
from background import keep_alive  # –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
import pip
import json
import urllib.parse
import urllib.request
import re
from config import API_TOKEN, WEATHER_API_KEY

pip.main(['install', 'pytelegrambotapi'])
import time
import math

bot = telebot.TeleBot(API_TOKEN)

bot_username = "@AlexGold777_bot"

a_de = ['–¥–µ', "–¥–µ —Ç—ã", "–∞ —Ç—ã –¥–µ"]
mddt = ['–º–¥–¥—Ç', 'mddt']
hello = ['hi', 'hello', 'prviet', '–ø—Ä–∏–≤–µ—Ç', '—à–∞–ª–æ–º']
ivan = ['ivan', '–∏–≤–∞–Ω', '–∏–≤–∞—à–∫–∞', '–∏–≤–∞–Ω—É—à–∫–∞', 'pidar']
a_sho = ['—à–æ']
dog_answer = ['–ê —à–æ', '–®–æ —Ç—ã —Ö–æ—á–µ—à—å', '–Ø —Ç—É—Ç –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω', '–ù–∞—Ö—É–π —Ç—ã –º–µ–Ω—ç —Ç–µ–≥–∞–µ—à—å –ø—ñ–¥–æ—à–≤–∞', '–í–∏–¥—å–µ–±—ã—Å—å',
              '–Ø —Ç–µ–±—è —É—Ä–æ–Ω—é –æ–± –∑–µ–º–ª—é', '–£–µ–±—É –±–∏—Ç–æ–π –ø–æ –≥–æ–ª–æ–≤–∏ —Ç—ç–±—ç']
voice = ['–¢–µ–∫—Å—Ç–æ–º –ø–∏—à–∏ –º—Ä–∞–∑—ñ–Ω–∞ –¥–∏—Ä—è–≤–∞', "–Ø —Ç–µ–±–µ –æ–±—ñ—Å—Ü—É –∑–∞ —Ç–∞–∫–µ", '–ù—É —à–æ –∂ —Ç–∏ –∑–∞ –≥–∞–Ω–¥–æ–Ω', '–ù–µ –º–æ–∂—É —Å–ª—É—Ö–∞—Ç—å –≤—ñ–¥–ø—Ä–∞–≤ –≤–æ–π—Å',
         "–Ø –Ω–∞ —Ç–µ–±–µ –†—É—Å—ñ–∫–∞ –Ω–∞—Ç—Ä–∞–≤–ª—é, —Ö–∞–π –≤—ñ–Ω —Ç–µ–±–µ –≤ —Å —Å—Ä–∞–∫—É –≤–∏—î–±–µ"]
golos = ['–≥–æ–ª–æ—Å', '–ø–µ—Å', '–ª—Å', 'voice', 'ls', '–º—Ä–∞–∑—å']


def get_random_audio_file():
    current_directory = os.path.dirname(os.path.abspath(__file__))
    audio_files = [file for file in os.listdir(current_directory) if file.endswith('.ogg')]
    random_file = random.choice(audio_files)
    return random_file


def fibonacci(n):
    phi = (1 + math.sqrt(5)) / 2
    psi = (1 - math.sqrt(5)) / 2
    return int((phi ** n - psi ** n) / math.sqrt(5))


def tribonacci(n, memo={}):
    if n in memo:
        return memo[n]
    elif n == 0:
        return 0
    elif n <= 2:
        return 1
    else:
        result = tribonacci(n - 1, memo) + tribonacci(n - 2, memo) + tribonacci(n - 3, memo)
        memo[n] = result
        return result


@bot.message_handler(commands=['help'])
def website(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    website = types.KeyboardButton('–≤–µ–± —Å–∞–π—Ç')
    start = types.KeyboardButton('Start')
    markup.add(website, start)
    bot.send_message(message.chat.id, '–û—Å—å –≥–∏–º–Ω–æ —è–∫—ç —Ç—ã —à—É–∫–∞–≤', reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(messege):
    mess = f'{messege.from_user.first_name}, –Ø —Ç–µ–±—è —É—Ä–æ–Ω—é –æ–± –∑–µ–º–ª—é'
    bot.send_message(messege.chat.id, mess, parse_mode='html')
    # bot.send_message(messege.chat.id, mess1, parse_mode='html')


@bot.message_handler(commands=['vin'])
def website(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–¶–ï –∫–æ—Ç–ª–µ—Ç–∞', url="https://www.copart.com/"))
    bot.send_message(message.chat.id, '–û—Å—å –≥–∏–º–Ω–æ —è–∫—ç —Ç—ã —à—É–∫–∞–≤', reply_markup=markup)


@bot.message_handler(
    func=lambda message: message.text and "@" + bot.get_me().username in message.text and not message.reply_to_message)
def get_dog(message):
    if message.text.startswith(bot_username):
        bot.reply_to(message, f"{message.from_user.first_name}, {random.choice(dog_answer)}ü§°ü§°ü§°ü§°ü§°ü§°")


@bot.message_handler(func=lambda
        message: message.reply_to_message and message.reply_to_message.from_user.username == bot.get_me().username,
                     content_types=['text'])
def get_user_text(message):
    message_id = message.message_id
    words = message.text.lower().split()
    for word in words:
        if word in a_de:
            audio = open('–Ø –≤—î–∑–¥—î.ogg', 'rb')
            bot.send_audio(message.chat.id, audio, reply_to_message_id=message_id)
            break
        elif word in a_sho:
            audio = open('–•—É–π –≤ —É—à–æ –±–ª—è–¥—å, –º—Ä–∞–∑–æ—Ç–∞.ogg', 'rb')
            bot.send_audio(message.chat.id, audio, reply_to_message_id=message_id)
            break
        elif word.isdigit():
            number = int(word)
            fib_number = fibonacci(number)
            fact = math.factorial(number)
            trib_number = tribonacci(number)
            response = f"""–ß–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ –¥–ª—è {number} —Ä–∞–≤–Ω–æ {fib_number},
            –ß–∏—Å–ª–æ –¢—Ä–∏–±–æ–Ω–∞—á–∏ –¥–ª—è {number}  —Ä–∞–≤–Ω–æ {trib_number}
            –§–∞–∫—Ç–æ—Ä–∏–∞–ª –¥–ª—è {number} —Ä–∞–≤–Ω–æ {fact},
            –ë–æ–ª—å—à–µ —è –Ω–∏—Ö—É—è –Ω–µ –∑–Ω–∞—é, —è –ø—Ä–æ—Å—Ç–æ —Ç—É–ø–æ–π –±–æ—Ç AlexGold."""
            bot.send_message(message.chat.id, response)
            break
        elif word in ivan:
            bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç, –Ø –ë–æ—Ç AlexGold –î—ã—Ä—è–≤—ç –æ—á–∫–æ", parse_mode='html')
            break
        elif word in golos:
            bot.send_message(message.chat.id, f"{message.from_user.first_name}, –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ –≤ –ª—Å", parse_mode='html')
            audio_file = get_random_audio_file()
            audio = open(audio_file, 'rb')
            bot.send_voice(str(message.from_user.id), audio)
            break
        elif word == 'id':
            bot.send_message(message.chat.id, f'–¢–≤–æ–π –ê–ô–î–ò: {message.from_user.id}', parse_mode='html')
            break
        elif word in hello:
            bot.reply_to(message, f'–®–∞–ª–æ–º {message.from_user.username} {message.from_user.first_name} ',
                         parse_mode='html')
            break
        elif word in mddt:
            audio = open('mddt.ogg', 'rb')
            bot.send_audio(message.chat.id, audio, reply_to_message_id=message_id)
            break
    else:
        city = extract_city_from_message(message.text.lower())
        if city:
            weather_data = get_weather(city)
            if weather_data:
                temperature = weather_data['main']['temp']
                description = weather_data['weather'][0]['description']
                response = f'{message.from_user.first_name} –ø–æ–≥–æ–¥–∞ –≤ {city}: {description}, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C'
                if temperature > 20:
                    response = f"{message.from_user.first_name} –ø–æ–≥–æ–¥–∞ –≤ {city}: {description}, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C, –ú–æ–∂–Ω–æ –µ—Ö–∞—Ç—å –º—Ä–∞–∑—É–≤–∞—Ç—å, –±—É–¥—É—Ç—å –æ–≥–Ω–µ–Ω–Ω—ã–µ –ø–æ–∫–æ—Å—ã"
            else:
                response = "–ù—É —Ç—ã —à–æ –ø—Ä–∏–±–∏—Ç–∏–π? –ù–µ –º–æ–∂–µ—à—å –Ω–∞–∑–≤—É –º–∏—Å—Ç–∞ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫ –Ω–∞–ø–∏—Å–∞—Ç—å?"
            bot.reply_to(message, response)
        else:
            audio_file = get_random_audio_file()
            audio = open(audio_file, 'rb')
            bot.send_audio(message.chat.id, audio, reply_to_message_id=message_id)



def extract_city_from_message(text):
    pattern = r"(?:–∫–∞–∫–∞—è\s+—Å–µ–≥–æ–¥–Ω—è\s+)?–ø–æ–≥–æ–¥–∞(?:\s+–≤)?(?:\s+–≤)?\s+([–ê-–Ø–∞-—è–Å—ë]+(?:\s+[–ê-–Ø–∞-—è–Å—ë]+)*)"
    match = re.search(pattern, text, re.IGNORECASE)
    return match.group(1).capitalize() if match else None

def get_weather(city):
    encoded_city = urllib.parse.quote(city)
    url = f"http://api.openweathermap.org/data/2.5/weather?q={encoded_city}&lang=ru&appid={WEATHER_API_KEY}&units=metric"
    try:
        with urllib.request.urlopen(url) as response:
            return json.loads(response.read().decode('utf-8'))
    except urllib.error.HTTPError:
        return None


@bot.message_handler(func=lambda
        message: message.reply_to_message and message.reply_to_message.from_user.username == bot.get_me().username,
                     content_types=['sticker'])
def get_user_sticker(message):
    """–æ—Ç–≤–µ—Ç —Ä–∞–Ω–¥–æ–º –≤–æ–π—Å–æ–º –Ω–∞ —Å—Ç–∏–∫–µ—Ä –æ—Ç —é–∑–µ—Ä–∞"""
    message_id = message.message_id
    audio_file = get_random_audio_file()
    audio = open(audio_file, 'rb')
    bot.send_audio(message.chat.id, audio, reply_to_message_id=message_id)


@bot.message_handler(func=lambda
        message: message.reply_to_message and message.reply_to_message.from_user.username == bot.get_me().username,
                     content_types=['voice'])
def get_user_voice(message):
    """–æ—Ç–≤–µ—Ç —Ä–∞–Ω–¥–æ–º –≤–æ–π—Å–æ–º –Ω–∞ –≤–æ–π—Å —é–∑–µ—Ä–∞"""
    bot.reply_to(message, f"{message.from_user.first_name}, {random.choice(voice)}")


#     return len(message.photo)


# @bot.message_handler()
# def send_foto(message):
#     if get_user_photo(message) > 1:
#         bot.reply_to(message, f"{random.choice(dog_answer)}, {message.from_user.first_name}")

keep_alive()  # –∑–∞–ø—É—Å–∫–∞–µ–º flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∏–∂–µ...
bot.polling(non_stop=True, interval=0)


print('Hello')